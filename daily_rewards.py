import logging
import sqlite3
import time
from aiogram import types, Dispatcher
from database import get_db_connection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = get_db_connection()
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /daily
cursor.execute('''
CREATE TABLE IF NOT EXISTS daily_rewards (
    user_id INTEGER PRIMARY KEY,
    last_daily_time INTEGER DEFAULT 0
)
''')
conn.commit()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–π–∫–æ–≤
cursor.execute('''
CREATE TABLE IF NOT EXISTS daily_strikes (
    user_id INTEGER PRIMARY KEY,
    strike_count INTEGER DEFAULT 0,
    last_strike_time INTEGER DEFAULT 0
)
''')
conn.commit()

async def daily_command(message: types.Message):
    user_id = message.from_user.id
    current_time = int(time.time())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /daily
    cursor.execute("SELECT last_daily_time FROM daily_rewards WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()

    if result:
        last_daily_time = result[0]
        if current_time - last_daily_time < 86400:  # 86400 —Å–µ–∫—É–Ω–¥ = 24 —á–∞—Å–∞
            remaining_time = 86400 - (current_time - last_daily_time)
            hours = int(remaining_time // 3600)
            minutes = int((remaining_time % 3600) // 60)
            await message.answer(f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç.")
            return
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /daily, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
        cursor.execute("INSERT INTO daily_rewards (user_id, last_daily_time) VALUES (?, ?)", (user_id, current_time))
        conn.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–π–∫
    cursor.execute("SELECT strike_count, last_strike_time FROM daily_strikes WHERE user_id = ?", (user_id,))
    strike_data = cursor.fetchone()

    if strike_data:
        strike_count, last_strike_time = strike_data
        if current_time - last_strike_time >= 86400:  # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–π–∫
            strike_count = 0
            cursor.execute("UPDATE daily_strikes SET strike_count = 0 WHERE user_id = ?", (user_id,))
            conn.commit()
    else:
        strike_count = 0
        cursor.execute("INSERT INTO daily_strikes (user_id, strike_count, last_strike_time) VALUES (?, ?, ?)", (user_id, strike_count, current_time))
        conn.commit()

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–π–∫
    strike_count += 1
    cursor.execute("UPDATE daily_strikes SET strike_count = ?, last_strike_time = ? WHERE user_id = ?", (strike_count, current_time, user_id))
    conn.commit()

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
    base_reward = 500
    if strike_count >= 3:
        bonus_percentage = 5 + (strike_count - 3) * 2
        reward = int(base_reward * (1 + bonus_percentage / 100))
    else:
        reward = base_reward

    # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
    cursor.execute("UPDATE users SET cat_coins = cat_coins + ?, magic_coins = magic_coins + ?, note_coins = note_coins + ? WHERE user_id = ?", (reward, reward, reward, user_id))
    conn.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /daily
    cursor.execute("UPDATE daily_rewards SET last_daily_time = ? WHERE user_id = ?", (current_time, user_id))
    conn.commit()

    await message.answer(
        f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É!\n"
        f"üê± +{reward} –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤\n"
        f"üîÆ +{reward} –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–∏–Ω–æ–≤\n"
        f"üéµ +{reward} –Ω–æ—Ç–æ–∫–æ–∏–Ω–æ–≤\n"
        f"–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π!"
    )

async def daily_strike_command(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–π–∫
    cursor.execute("SELECT strike_count, last_strike_time FROM daily_strikes WHERE user_id = ?", (user_id,))
    strike_data = cursor.fetchone()

    if strike_data:
        strike_count, last_strike_time = strike_data
        current_time = int(time.time())
        if current_time - last_strike_time >= 86400:  # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–π–∫
            strike_count = 0
            cursor.execute("UPDATE daily_strikes SET strike_count = 0 WHERE user_id = ?", (user_id,))
            conn.commit()
        await message.answer(f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∞–π–∫: {strike_count}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç—Ä–∞–π–∫–∞.")

def register_daily_handlers(dp: Dispatcher):
    dp.register_message_handler(daily_command, commands=["daily"])
    dp.register_message_handler(daily_strike_command, commands=["daily_strike"])