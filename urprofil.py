import logging
import os
import sqlite3
import time
from aiogram import types, Dispatcher
from aiogram.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton

from advanced_logger import log_operation_async
from database import get_db_connection
from CheckName import check_name
from data import cats  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ cats –∏–∑ data.py

conn = get_db_connection()
cursor = conn.cursor()

def add_note_coins_column():
    try:
        cursor.execute("PRAGMA table_info(users)")
        columns = cursor.fetchall()
        if "note_coins" not in [column[1] for column in columns]:
            cursor.execute("ALTER TABLE users ADD COLUMN note_coins INTEGER DEFAULT 0")
            conn.commit()
            logging.info("–°—Ç–æ–ª–±–µ—Ü note_coins –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É users.")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ note_coins: {e}")


add_note_coins_column()


def add_catname_column():
    try:
        cursor.execute("PRAGMA table_info(cards)")
        columns = cursor.fetchall()
        if "catname" not in [column[1] for column in columns]:
            cursor.execute("ALTER TABLE cards ADD COLUMN catname TEXT")
            conn.commit()
            logging.info("–°—Ç–æ–ª–±–µ—Ü catname –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É cards.")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ catname: {e}")

def update_catname_in_cards():
    try:
        cursor.execute("SELECT cat_id FROM cards")
        cards = cursor.fetchall()
        for card in cards:
            cat_id = card[0]
            cat = next((cat for cat in cats if cat["id"] == cat_id), None)
            if cat:
                cursor.execute(
                    "UPDATE cards SET catname = ? WHERE cat_id = ?",
                    (cat["catname"], cat_id),
                )
                conn.commit()
        logging.info("–°—Ç–æ–ª–±–µ—Ü catname –æ–±–Ω–æ–≤–ª—ë–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ cards.")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ catname: {e}")




# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists('avatars'):
    os.makedirs('avatars')

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É avatar_waiting, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cursor.execute('''
CREATE TABLE IF NOT EXISTS avatar_waiting (
    user_id INTEGER PRIMARY KEY,
    start_time INTEGER
)
''')
conn.commit()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª—é–±–∏–º–æ–π –∫–∞—Ä—Ç—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cursor.execute('''
CREATE TABLE IF NOT EXISTS favorite_cards (
    user_id INTEGER PRIMARY KEY,
    card_id TEXT,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
)
''')
conn.commit()

async def avatar_command(message: types.Message):
    user_id = message.from_user.id
    start_time = int(time.time())

    cursor.execute(
        "INSERT OR REPLACE INTO avatar_waiting (user_id, start_time) VALUES (?, ?)",
        (user_id, start_time),
    )
    conn.commit()

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥.")

async def handle_avatar(message: types.Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(
        "SELECT start_time FROM avatar_waiting WHERE user_id = ?",
        (user_id,),
    )
    result = cursor.fetchone()

    if not result:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /avatar.")
        return

    start_time = result[0]

    if time.time() - start_time > 30:
        await message.answer("–ü—Ä–æ—à–ª–æ 30 —Å–µ–∫—É–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /avatar —Å–Ω–æ–≤–∞.")
        return

    if not message.photo:
        await message.answer("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    photo_id = message.photo[-1].file_id
    photo_info = await message.bot.get_file(photo_id)
    photo_path = f"avatars/{user_id}.jpg"

    await message.photo[-1].download(destination_file=photo_path)
    await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(
        "DELETE FROM avatar_waiting WHERE user_id = ?",
        (user_id,),
    )
    conn.commit()

    await log_operation_async(
        "Avatar Changed",
        f"User {message.from_user.id} uploaded new avatar",
        "PROFILE"
    )


async def profil_command(message: types.Message):
    if not await check_name(message):
        return

    user_id = message.from_user.id
    cursor.execute(
        "SELECT rarity, note_coins, points, highest_rarity, cat_coins, magic_coins, has_scratcher, has_companion, "
        "booster_end_time, has_time_watch, has_magic_medallion, has_magic_luck_scroll, has_wishing_fountain, "
        "username FROM users WHERE user_id = ?",
        (user_id,),
    )
    user_data = cursor.fetchone()

    if user_data:
        rarity, notocoins, points, highest_rarity, cat_coins, magic_coins, has_scratcher, has_companion, booster_end_time, has_time_watch, has_magic_medallion, has_magic_luck_scroll, has_wishing_fountain, username = user_data
        booster_status = "‚úÖ –∞–∫—Ç–∏–≤–µ–Ω" if booster_end_time and booster_end_time > time.time() else "‚ùå –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
        wishing_fountain_status = "‚úÖ –µ—Å—Ç—å" if has_wishing_fountain else "‚ùå –Ω–µ—Ç"

        # –ü–æ–ª—É—á–∞–µ–º –ª—é–±–∏–º—É—é –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            "SELECT card_id FROM favorite_cards WHERE user_id = ?",
            (user_id,),
        )
        favorite_card = cursor.fetchone()
        favorite_card_name = "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
        if favorite_card:
            # –ò—â–µ–º –∏–º—è –∫–æ—Ç–∞ –ø–æ cat_id –≤ —Å–ø–∏—Å–∫–µ cats
            cat_id = favorite_card[0]
            cat = next((cat for cat in cats if cat["id"] == cat_id), None)
            if cat:
                favorite_card_name = cat["catname"]

        avatar_path = f"avatars/{user_id}.jpg"
        if os.path.exists(avatar_path):
            photo = InputFile(avatar_path)
            caption = (
                f"üåü **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}** üåü\n\n"
                f"‚ù§Ô∏è **–õ—é–±–∏–º–∞—è –∫–∞—Ä—Ç–∞:** {favorite_card_name}\n"
                f"‚ú® **–û—á–∫–∏:** {points:,}\n"
                f"üèÜ **–°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å:** {highest_rarity}\n\n"

                f"üí∞ **–†–µ—Å—É—Ä—Å—ã:**\n"
                f"üê± **–ö–æ—Ç–æ–∫–æ–∏–Ω—ã:** {cat_coins:,}\n"
                f"üîÆ **–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–∏–Ω—ã:** {magic_coins:,}\n"
                f"üéµ **–ù–æ—Ç–æ–∫–æ–∏–Ω—ã:** {notocoins:,}\n\n"

                f"üõ†Ô∏è **–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:**\n"
                f"üêæ **–ß–µ—Å–∞–ª–∫–∞:** {'‚úÖ –µ—Å—Ç—å' if has_scratcher else '‚ùå –Ω–µ—Ç'}\n"
                f"‚è≥ **–ß–∞—Å—ã –≤—Ä–µ–º–µ–Ω–∏:** {'‚úÖ –µ—Å—Ç—å' if has_time_watch else '‚ùå –Ω–µ—Ç'}\n"
                f"üîÆ **–ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ–¥–∞–ª—å–æ–Ω:** {'‚úÖ –µ—Å—Ç—å' if has_magic_medallion else '‚ùå –Ω–µ—Ç'}\n"
                f"‚ú® **–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Å–≤–∏—Ç–æ–∫ —É–¥–∞—á–∏:** {'‚úÖ –µ—Å—Ç—å' if has_magic_luck_scroll else '‚ùå –Ω–µ—Ç'}\n"
                f"‚ú® **–§–æ–Ω—Ç–∞–Ω –∂–µ–ª–∞–Ω–∏–π:** {wishing_fountain_status}\n\n"

                f"üöÄ **–ë—É—Å—Ç–µ—Ä—ã:**\n"
                f"üê± **–ö–æ—Ç –∫–æ–º–ø–∞–Ω—å–æ–Ω:** {'‚úÖ –µ—Å—Ç—å' if has_companion else '‚ùå –Ω–µ—Ç'}\n"
                f"üöÄ **–ö–æ—Ç-–±—É—Å—Ç–µ—Ä:** {booster_status}\n\n"
            )

            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("üìö –ú–æ–∏ –∫–∞—Ä—Ç—ã", callback_data="view_collection"),
                InlineKeyboardButton("‚ù§Ô∏è –í—ã–±—Ä–∞—Ç—å –ª—é–±–∏–º—É—é –∫–∞—Ä—Ç—É", callback_data="choose_favorite_card")
            )

            await message.answer_photo(
                photo,
                caption=caption,
                reply_markup=keyboard,
                parse_mode=types.ParseMode.MARKDOWN,
            )
        else:
            await message.answer(
                f"üåü **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}** üåü\n\n"
                f"‚ù§Ô∏è **–õ—é–±–∏–º–∞—è –∫–∞—Ä—Ç–∞:** {favorite_card_name}\n"
                f"‚ú® **–û—á–∫–∏:** {points:,}\n"
                f"üèÜ **–°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å:** {highest_rarity}\n\n"

                f"üí∞ **–†–µ—Å—É—Ä—Å—ã:**\n"
                f"üê± **–ö–æ—Ç–æ–∫–æ–∏–Ω—ã:** {cat_coins:,}\n"
                f"üîÆ **–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–∏–Ω—ã:** {magic_coins:,}\n"
                f"üéµ **–ù–æ—Ç–æ–∫–æ–∏–Ω—ã:** {notocoins:,}\n\n"

                f"üõ†Ô∏è **–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:**\n"
                f"üêæ **–ß–µ—Å–∞–ª–∫–∞:** {'‚úÖ –µ—Å—Ç—å' if has_scratcher else '‚ùå –Ω–µ—Ç'}\n"
                f"‚è≥ **–ß–∞—Å—ã –≤—Ä–µ–º–µ–Ω–∏:** {'‚úÖ –µ—Å—Ç—å' if has_time_watch else '‚ùå –Ω–µ—Ç'}\n"
                f"üîÆ **–ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ–¥–∞–ª—å–æ–Ω:** {'‚úÖ –µ—Å—Ç—å' if has_magic_medallion else '‚ùå –Ω–µ—Ç'}\n"
                f"‚ú® **–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Å–≤–∏—Ç–æ–∫ —É–¥–∞—á–∏:** {'‚úÖ –µ—Å—Ç—å' if has_magic_luck_scroll else '‚ùå –Ω–µ—Ç'}\n"
                f"‚ú® **–§–æ–Ω—Ç–∞–Ω –∂–µ–ª–∞–Ω–∏–π:** {wishing_fountain_status}\n\n"

                f"üöÄ **–ë—É—Å—Ç–µ—Ä—ã:**\n"
                f"üê± **–ö–æ—Ç –∫–æ–º–ø–∞–Ω—å–æ–Ω:** {'‚úÖ –µ—Å—Ç—å' if has_companion else '‚ùå –Ω–µ—Ç'}\n"
                f"üöÄ **–ö–æ—Ç-–±—É—Å—Ç–µ—Ä:** {booster_status}\n\n",
                parse_mode=types.ParseMode.MARKDOWN,
            )
    else:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ—Ç–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ!")

async def choose_favorite_card(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    cursor.execute(
        "SELECT cat_id, cat_image, rarity, points, catname FROM cards WHERE user_id = ?",
        (user_id,),
    )
    cards = cursor.fetchall()

    if not cards:
        await callback.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.")
        return


    await show_card_for_favorite(callback.message, cards, 0)

async def show_card_for_favorite(message: types.Message, cards: list, index: int):
    if index >= len(cards) or index < 0:
        await message.answer("–≠—Ç–æ –≤—Å–µ –≤–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏!")
        return

    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤—Å–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π
    cat_id, cat_image, rarity, points, catname = cards[index]

    keyboard = InlineKeyboardMarkup(row_width=2)
    if index > 0:
        keyboard.insert(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"prev_favorite_{index - 1}"))
    if index < len(cards) - 1:
        keyboard.insert(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"next_favorite_{index + 1}"))
    keyboard.add(InlineKeyboardButton("‚ù§Ô∏è –í—ã–±—Ä–∞—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É", callback_data=f"set_favorite_{cat_id}"))

    await message.bot.send_photo(
        chat_id=message.chat.id,
        photo=cat_image,
        caption=f"üê± –ò–º—è –∫–æ—Ç–∞: {catname}\nüíé –†–µ–¥–∫–æ—Å—Ç—å: {rarity}\n‚ú® –û—á–∫–∏: {points}",
        reply_markup=keyboard,
    )

async def set_favorite_card(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    card_id = callback.data.split("_")[2]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—é–±–∏–º—É—é –∫–∞—Ä—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(
        "INSERT OR REPLACE INTO favorite_cards (user_id, card_id) VALUES (?, ?)",
        (user_id, card_id),
    )
    conn.commit()

    await callback.answer(f"–ö–∞—Ä—Ç–∞ {card_id} –≤—ã–±—Ä–∞–Ω–∞ –∫–∞–∫ –ª—é–±–∏–º–∞—è!")
    await callback.message.delete()

async def next_favorite_card(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    index = int(callback.data.split("_")[2])

    cursor.execute(
        "SELECT cat_id, cat_image, rarity, points, catname FROM cards WHERE user_id = ?",
        (user_id,),
    )
    cards = cursor.fetchall()

    await callback.message.delete()
    await show_card_for_favorite(callback.message, cards, index)

async def prev_favorite_card(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    index = int(callback.data.split("_")[2])

    cursor.execute(
        "SELECT cat_id, cat_image, rarity, points, catname FROM cards WHERE user_id = ?",
        (user_id,),
    )
    cards = cursor.fetchall()

    await callback.message.delete()
    await show_card_for_favorite(callback.message, cards, index)

def register_urprofil_handlers(dp: Dispatcher):
    dp.register_message_handler(avatar_command, commands=["avatar"])
    dp.register_message_handler(handle_avatar, content_types=types.ContentType.PHOTO)
    dp.register_message_handler(profil_command, commands=["profile"])
    dp.register_callback_query_handler(choose_favorite_card, lambda c: c.data == "choose_favorite_card")
    dp.register_callback_query_handler(set_favorite_card, lambda c: c.data.startswith("set_favorite_"))
    dp.register_callback_query_handler(next_favorite_card, lambda c: c.data.startswith("next_favorite_"))
    dp.register_callback_query_handler(prev_favorite_card, lambda c: c.data.startswith("prev_favorite_"))
    add_catname_column()
    update_catname_in_cards()