import os

import aiofiles
import zipfile
from datetime import datetime
import asyncio
from pathlib import Path

from aiogram import Dispatcher, types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
LOG_DIR = "logs"
ARCHIVE_DIR = "logs/archives"
MIN_ARCHIVE_SIZE = 50 * 1024 * 1024  # 50 –ú–ë
ARCHIVE_INTERVAL = 600
ROTATION_HOURS = 2

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
Path(LOG_DIR).mkdir(exist_ok=True)
Path(ARCHIVE_DIR).mkdir(exist_ok=True)


async def log_operation_async(operation: str, details: str, level: str = "INFO"):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] {level.upper()}: {operation}\n–î–µ—Ç–∞–ª–∏: {details}\n\n"

    try:
        async with aiofiles.open(f"{LOG_DIR}/complex_operations.log", mode='a', encoding='utf-8') as f:
            await f.write(log_entry)
    except Exception as e:
        print(f"‚ö†Ô∏è Failed to log: {e}")


async def archive_file(log_file: Path):
    """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –ª–æ–≥-—Ñ–∞–π–ª"""
    try:
        archive_name = f"{ARCHIVE_DIR}/{log_file.stem}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"

        async with aiofiles.open(log_file, mode='rb') as f:
            content = await f.read()

        with zipfile.ZipFile(archive_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
            zipf.writestr(log_file.name, content)

        async with aiofiles.open(log_file, mode='wb') as f:
            await f.write(b"")

        await log_operation_async("Log Archive", f"Archived {log_file.name}", "INFO")
        return True
    except Exception as e:
        await log_operation_async("Archive Error", f"{log_file.name}: {str(e)}", "ERROR")
        return False


async def archive_large_logs():
    """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ –ª–æ–≥-—Ñ–∞–π–ª—ã > 50 –ú–ë —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫"""
    archived = 0
    log_dir = Path("logs")

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞—Ä—Ö–∏–≤–æ–≤
    (log_dir / "archives").mkdir(exist_ok=True)

    for log_file in log_dir.glob("*.log"):
        try:
            # –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            if not log_file.exists():
                await log_operation_async("File Check", f"{log_file.name} - –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "WARNING")
                continue

            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞
            file_size = os.path.getsize(log_file)
            size_mb = file_size / (1024 * 1024)

            await log_operation_async("File Check",
                                      f"{log_file.name} - {size_mb:.2f} MB (—Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä)",
                                      "DEBUG")

            if file_size > MIN_ARCHIVE_SIZE:
                # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
                archive_path = log_dir / "archives" / f"{log_file.stem}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"

                # –ß—Ç–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π open (–Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å aiofiles)
                with open(log_file, 'rb') as f:
                    content = f.read()

                with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                    zipf.writestr(log_file.name, content)

                # –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞
                with open(log_file, 'wb') as f:
                    f.write(b"")

                archived += 1
                await log_operation_async("Archive Success",
                                          f"{log_file.name} ({size_mb:.2f} MB) ‚Üí {archive_path}",
                                          "INFO")

        except Exception as e:
            await log_operation_async("Archive Error",
                                      f"{log_file.name}: {type(e).__name__} - {str(e)}",
                                      "ERROR")

    return archived


async def auto_archive_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏"""
    while True:
        try:
            archived = await archive_large_logs()
            if archived > 0:
                await log_operation_async("Auto Archive", f"Archived {archived} files", "DEBUG")
        except Exception as e:
            await log_operation_async("Auto Archive Error", str(e), "ERROR")
        await asyncio.sleep(ARCHIVE_INTERVAL)

async def rotation_task_async():
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
    while True:
        await archive_large_logs()
        await asyncio.sleep(ROTATION_HOURS * 3600)


async def clean_old_archives(max_files=5):
    """–û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ö–∏–≤–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
    try:
        archives = sorted(Path(ARCHIVE_DIR).glob("*.zip"), key=lambda f: f.stat().st_mtime)
        if len(archives) > max_files:
            for old_archive in archives[:-max_files]:
                old_archive.unlink()
    except Exception as e:
        await log_operation_async("Archive Clean Error", str(e), "ERROR")


async def archive_command(message: types.Message):
    """–†—É—á–Ω–∞—è –∞—Ä—Ö–∏–≤–∞—Ü–∏—è –ª–æ–≥–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    try:
        if message.from_user.id not in [6324881038]:  # –í–∞—à ID
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
            return

        await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –∞—Ä—Ö–∏–≤–∞—Ü–∏—é –ª–æ–≥–æ–≤...")
        archived = await archive_large_logs()
        await message.answer(f"‚úÖ –ó–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {archived} —Ñ–∞–π–ª–æ–≤")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        await log_operation_async("Archive Command Error", str(e), "ERROR")

def start_logger(app):
    @app.on_startup
    async def startup():
        asyncio.create_task(auto_archive_task())  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        await log_operation_async("System", "Auto-archive task started", "INFO")

def register_quest_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...
    dp.register_message_handler(archive_command, commands=["archive"], user_id=[6324881038])