import json
import random
from datetime import datetime
from aiogram import types, Dispatcher
from pathlib import Path
import aiofiles
from typing import Dict, Any, Optional, List

from database import get_db_connection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
QUESTS_DIR = Path("quests_data")
USER_PROGRESS_DIR = QUESTS_DIR / "user_progress_json_files"
QUEST_CATEGORIES = {
    "cat": QUESTS_DIR / "available_quests/available_quests_cat",
    "magic": QUESTS_DIR / "available_quests/available_quests_magic",
    "melody": QUESTS_DIR / "available_quests/available_quests_melodygame"
}
CATEGORY_WEIGHTS = {
    "cat": 1.0,    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
    "magic": 1.0,  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
    "melody": 1.25 # –ù–∞ 25% —á–∞—â–µ
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
for category_dir in QUEST_CATEGORIES.values():
    if not category_dir.exists():
        raise RuntimeError(
            f"–ü–∞–ø–∫–∞ –∫–≤–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {category_dir}\n"
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ init_quests.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
        )


async def log_operation_async(operation: str, details: str, level: str = "INFO"):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] {level.upper()}: {operation}\n–î–µ—Ç–∞–ª–∏: {details}\n\n"

    try:
        async with aiofiles.open("logs/quests.log", mode="a", encoding="utf-8") as f:
            await f.write(log_entry)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


async def load_user_progress(user_id: int) -> Optional[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_file = USER_PROGRESS_DIR / f"{user_id}.json"
    try:
        if user_file.exists():
            async with aiofiles.open(user_file, mode="r", encoding="utf-8") as f:
                data = json.loads(await f.read())

                # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                required_fields = ["active_quest", "category", "progress", "completed"]
                if not all(field in data for field in required_fields):
                    await log_operation_async(
                        "Invalid Progress File",
                        f"User {user_id} - Missing fields, resetting",
                        "WARNING"
                    )
                    return None

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è "–±–∏—Ç—ã—Ö" –∫–≤–µ—Å—Ç–æ–≤
                if data["active_quest"] and not data.get("quest_file"):
                    await log_operation_async(
                        "Corrupted Quest",
                        f"User {user_id} - Quest without file, resetting",
                        "ERROR"
                    )
                    return None

                return data
    except Exception as e:
        await log_operation_async("Load Progress Error", f"User {user_id}: {str(e)}", "ERROR")
    return None


async def save_user_progress(user_id: int, data: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_file = USER_PROGRESS_DIR / f"{user_id}.json"
    try:
        async with aiofiles.open(user_file, mode="w", encoding="utf-8") as f:
            await f.write(json.dumps(data, indent=2, ensure_ascii=False))
    except Exception as e:
        await log_operation_async(
            "Save Progress Error",
            f"User {user_id}: {str(e)}",
            "CRITICAL"
        )


async def load_quests(category: str) -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–≤–µ—Å—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    quests = []
    quest_dir = QUEST_CATEGORIES.get(category)

    if not quest_dir:
        return quests

    for quest_file in quest_dir.glob("*.json"):
        try:
            async with aiofiles.open(quest_file, mode="r", encoding="utf-8") as f:
                quest_data = json.loads(await f.read())
                quest_data["file"] = quest_file.name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤
                quests.append(quest_data)
        except Exception as e:
            await log_operation_async(
                "Load Quest Error",
                f"Failed to load {quest_file}: {str(e)}",
                "ERROR"
            )

    return quests


async def assign_random_quest(user_id: int) -> Optional[Dict[str, Any]]:
    try:
        weighted_quests = []

        # –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –∫–≤–µ—Å—Ç—ã —Å —É—á—ë—Ç–æ–º –≤–µ—Å–æ–≤
        for category in QUEST_CATEGORIES:
            quests = await load_quests(category)
            for quest in quests:
                quest["_category"] = category
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–≤–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                repeat_count = int(CATEGORY_WEIGHTS.get(category, 1.0) * 100)
                weighted_quests.extend([quest] * repeat_count)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–≤–µ—Å—Ç—ã –≤–æ–æ–±—â–µ (—Ç–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –í–°–ï–•)
        if not weighted_quests:
            await log_operation_async("No Quests", "No quests in ANY category", "WARNING")
            return None

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–≤–µ—Å—Ç —Å —É—á—ë—Ç–æ–º –≤–µ—Å–æ–≤
        new_quest = random.choice(weighted_quests)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_data = {
            "active_quest": new_quest["id"],
            "category": new_quest["_category"],
            "progress": 0,
            "completed": False,
            "last_update": datetime.now().date().isoformat(),
            "reward_claimed": False,
            "quest_file": new_quest.get("file", "unknown")
        }
        await save_user_progress(user_id, progress_data)

        return new_quest

    except Exception as e:
        await log_operation_async("Assign Quest Error", f"User {user_id}: {str(e)}", "CRITICAL")
        raise


async def update_quest_progress(user_id: int, quest_type: str, amount: int = 1) -> bool:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É –∫–≤–µ—Å—Ç—É"""
    try:
        progress = await load_user_progress(user_id)
        if not progress or progress["completed"]:
            return False

        quest_category = progress["category"]
        quests = await load_quests(quest_category)
        quest = next(
            (q for q in quests if q["id"] == progress["active_quest"]),
            None
        )

        if not quest:
            return False

        # –î–ª—è –∫–≤–µ—Å—Ç–∞ –Ω–∞ —Ä–µ–¥–∫–∏—Ö –∫–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø
        if quest_type == "cat_rare" and quest["id"] != "cat_quest_2":
            return False

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress["progress"] += amount
        if progress["progress"] >= quest["target"]:
            progress["completed"] = True

        await save_user_progress(user_id, progress)
        return True

    except Exception as e:
        await log_operation_async(
            "Update Progress Error",
            f"User {user_id}: {str(e)}",
            "ERROR"
        )
        return False


async def claim_quest_reward(user_id: int, cursor=None, conn=None) -> Optional[Dict[str, int]]:
    """–í—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∫–≤–µ—Å—Ç"""
    try:
        progress = await load_user_progress(user_id)
        if not progress or not progress["completed"] or progress["reward_claimed"]:
            return None

        quest_category = progress["category"]
        quests = await load_quests(quest_category)
        quest = next((q for q in quests if q["id"] == progress["active_quest"]), None)

        if not quest:
            return None

        reward = quest.get("reward", {})

        # –í—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥—ã (–≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
        # ...

        # –ü–æ—Å–ª–µ –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥—ã –°–ë–†–ê–°–´–í–ê–ï–ú –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress["active_quest"] = None
        progress["progress"] = 0
        progress["completed"] = False
        progress["reward_claimed"] = False
        await save_user_progress(user_id, progress)

        return reward

    except Exception as e:
        await log_operation_async(
            "Claim Reward Error",
            f"User {user_id}: {str(e)}",
            "CRITICAL"
        )
        raise


async def quests_command(message: types.Message):
    try:
        user_id = message.from_user.id
        progress = await load_user_progress(user_id)

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –±–∏—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if progress and not progress.get("active_quest"):
            await save_user_progress(user_id, {})
            progress = None

        if not progress or not progress.get("active_quest"):
            quest = await assign_random_quest(user_id)  # –£–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!
            if not quest:
                await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤")
                return

            await message.answer(
                f"üéâ –ù–æ–≤—ã–π –∫–≤–µ—Å—Ç ({quest.get('type', quest['_category'])})!\n\n"
                f"üè∑ {quest['title']}\n"
                f"üìù {quest['description']}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quests_progress –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"
            )
            return

        # –ï—Å–ª–∏ –∫–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω, –Ω–æ –Ω–∞–≥—Ä–∞–¥–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞
        if progress["completed"] and not progress["reward_claimed"]:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "üéÅ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É",
                    callback_data=f"claim_reward:{user_id}"
                )
            )
            await message.answer(
                "–£ –≤–∞—Å –µ—Å—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∫–≤–µ—Å—Ç. –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É —á—Ç–æ–±—ã –≤–∑—è—Ç—å –Ω–æ–≤—ã–π.",
                reply_markup=keyboard
            )
            return

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∫–≤–µ—Å—Ç
        quests = await load_quests(progress["category"])
        current_quest = next(
            (q for q in quests if q["id"] == progress["active_quest"]),
            {"title": "Unknown", "description": "", "target": 1}
        )

        await message.answer(
            f"üìå –¢–µ–∫—É—â–∏–π –∫–≤–µ—Å—Ç ({progress['category']}):\n"
            f"üè∑ {current_quest['title']}\n"
            f"üìù {current_quest['description']}\n"
            f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress['progress']}/{current_quest['target']}"
        )

    except Exception as e:
        await log_operation_async(
            "Quests Command Error",
            f"User {message.from_user.id}: {str(e)}",
            "CRITICAL"
        )
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def quests_progress_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quests_progress"""
    try:
        user_id = message.from_user.id
        progress = await load_user_progress(user_id)

        if not progress:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quests")
            return

        quests = await load_quests(progress["category"])
        current_quest = next(
            (q for q in quests if q["id"] == progress["active_quest"]),
            {"title": "Unknown", "description": "", "target": 1}
        )

        await message.answer(
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–≤–µ—Å—Ç—É ({progress['category']}):\n"
            f"üè∑ {current_quest['title']}\n"
            f"üîπ {progress['progress']}/{current_quest['target']}\n"
            f"üìù {current_quest['description']}\n\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω' if progress['completed'] else 'üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}"
        )

    except Exception as e:
        await log_operation_async(
            "Quest Progress Error",
            f"User {message.from_user.id}: {str(e)}",
            "ERROR"
        )
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")


async def claim_reward_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã"""
    try:
        user_id = int(callback.data.split(":")[1])
        conn = get_db_connection()
        cursor = conn.cursor()

        try:
            reward = await claim_quest_reward(user_id, cursor=cursor, conn=conn)
            if not reward:
                await callback.answer("–ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ –∏–ª–∏ –∫–≤–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
                return

            # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞–≥—Ä–∞–¥
            reward_names = {
                "magic_coins": "üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–∏–Ω—ã",
                "cat_coins": "üê± –∫–æ—Ç–æ–∫–æ–∏–Ω—ã",
                "note_coins": "üéµ –ù–æ—Ç–æ–∫–æ–∏–Ω—ã",
                "points": "‚≠ê –û—á–∫–∏"
            }

            reward_text = "\n".join(
                f"{reward_names.get(key, key)}: {value}"
                for key, value in reward.items()
            )

            await callback.message.edit_text(
                f"üéâ –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n{reward_text}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quests –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞"
            )
            await callback.answer()
        finally:
            conn.close()
    except Exception as e:
        await log_operation_async("Reward Claim Error", f"User {callback.from_user.id}: {str(e)}", "CRITICAL")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥—ã")


async def send_logs_command(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω—É"""
    try:
        log_file = Path("logs/quests.log")
        archive_dir = Path("logs/archives")
        archives = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞—Ä–∞–Ω–µ–µ

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ª–æ–≥–∞
        if log_file.exists():
            await message.bot.send_document(
                chat_id=message.chat.id,
                document=open(log_file, 'rb'),
                caption="üìú –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ª–æ–≥"
            )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—Ä—Ö–∏–≤–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if archive_dir.exists():
            archives = sorted(archive_dir.glob("*.zip"), key=lambda f: f.stat().st_mtime, reverse=True)

        if archives:  # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤—Å–µ–≥–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
            await message.bot.send_document(
                chat_id=message.chat.id,
                document=open(archives[0], 'rb'),
                caption="üóÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä—Ö–∏–≤ –ª–æ–≥–æ–≤"
            )
        elif not log_file.exists():
            await message.answer("–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        await log_operation_async(
            "Log Send Error",
            f"Failed to send logs: {str(e)}",
            "CRITICAL"
        )

def register_quest_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.register_message_handler(quests_command, commands=["quests"])
    dp.register_message_handler(quests_progress_command, commands=["quests_progress"])
    dp.register_message_handler(send_logs_command, commands=["logs"], user_id=[6324881038])
    dp.register_callback_query_handler(
        claim_reward_callback,
        lambda c: c.data.startswith("claim_reward:")
    )