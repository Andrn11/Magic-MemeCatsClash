from aiogram import types, Dispatcher
from database import get_db_connection, conn, cursor


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
temp_data = {}


async def register_start(message: types.Message):
    user_id = message.from_user.id


    cursor.execute("SELECT * FROM site_name_password WHERE user_id = ?", (user_id,))
    if cursor.fetchone():
        await message.answer("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    temp_data[user_id] = {"step": "waiting_for_name"}
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ):")


async def process_name(message: types.Message):
    user_id = message.from_user.id
    username = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏
    if len(username) < 3 or len(username) > 20:
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!")
        return

    cursor.execute("SELECT * FROM site_name_password WHERE username = ?", (username,))
    if cursor.fetchone():
        await message.answer("‚ùå –≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.")
        return


    temp_data[user_id] = {
        "step": "waiting_for_password",
        "username": username
    }
    await message.answer("üîë –¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–æ—Ç 5 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤):")

async def process_password(message: types.Message):
    user_id = message.from_user.id
    password = message.text.strip()


    if len(password) < 5 or len(password) > 32:
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤!")
        return


    username = temp_data[user_id]["username"]


    cursor.execute(
        "INSERT INTO site_name_password (user_id, username, password) VALUES (?, ?, ?)",
        (user_id, username, password)
    )
    conn.commit()


    del temp_data[user_id]

    await message.answer(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–õ–æ–≥–∏–Ω: <code>{username}</code>\n"
        f"–ü–∞—Ä–æ–ª—å: <code>{password}</code>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ!",
        parse_mode="HTML"
    )

def register_register_handlers(dp: Dispatcher):
    dp.register_message_handler(register_start, commands=['register'])
    dp.register_message_handler(process_name, lambda message: temp_data.get(message.from_user.id, {}).get("step") == "waiting_for_name")
    dp.register_message_handler(process_password, lambda message: temp_data.get(message.from_user.id, {}).get("step") == "waiting_for_password")