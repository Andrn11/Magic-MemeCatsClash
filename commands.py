import logging
from aiogram import Dispatcher, types
import random
import time
import sqlite3
import json
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from advanced_logger import log_operation_async
from data import cats, rarity_weights
from lecsicon import cat_synonyms
from aiogram.types import ParseMode
from Magicsends import jujitsu_command
from quests import update_quest_progress, load_user_progress
from shop import shop_command
from ledersboard import leders_command
from ValutionTrade import exchange_command
from CheckName import check_name
from database import get_db_connection

conn = get_db_connection()
cursor = conn.cursor()

def add_wishing_fountain_column():
    try:
        cursor.execute("PRAGMA table_info(users)")
        columns = cursor.fetchall()
        if "has_wishing_fountain" not in [column[1] for column in columns]:
            cursor.execute("ALTER TABLE users ADD COLUMN has_wishing_fountain INTEGER DEFAULT 0")
            conn.commit()
            logging.info("–°—Ç–æ–ª–±–µ—Ü has_wishing_fountain –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É users.")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ has_wishing_fountain: {e}")

def create_magic_cards_table():
    try:
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS magic_cards (
                user_id INTEGER,
                card_id TEXT,
                FOREIGN KEY (user_id) REFERENCES users(user_id),
                FOREIGN KEY (card_id) REFERENCES magic(id),
                PRIMARY KEY (user_id, card_id)
            );
        ''')
        conn.commit()
        logging.info("–¢–∞–±–ª–∏—Ü–∞ magic_cards —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã magic_cards: {e}")



def add_nyan_mp3_column():
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN has_nyan_mp3 INTEGER DEFAULT 0")
        conn.commit()
        logging.info("–°—Ç–æ–ª–±–µ—Ü has_nyan_mp3 –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É users.")
    except sqlite3.OperationalError as e:
        logging.warning(f"–°—Ç–æ–ª–±–µ—Ü has_nyan_mp3 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")

add_nyan_mp3_column()


async def nyan_mp3_command(message: types.Message):
    user_id = message.from_user.id

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /nyan.mp3")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ
    cursor.execute("SELECT user_id, has_nyan_mp3, note_coins FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()

    if not user_data:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        cursor.execute(
            "INSERT INTO users (user_id, rarity, points, highest_rarity, cat_coins, magic_coins, has_nyan_mp3, note_coins) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
            (user_id, "–æ–±—ã—á–Ω—ã–π", 0, "–æ–±—ã—á–Ω—ã–π", 0, 0, 0, 0),
        )
        conn.commit()
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É users.")
        has_nyan_mp3 = 0
        note_coins = 0
    else:
        user_id, has_nyan_mp3, note_coins = user_data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—É —Ä–∞–Ω–µ–µ
    if has_nyan_mp3:
        await message.answer("–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É! –û–Ω–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è. üòâ")
        return

    # –í—ã–¥–∞—ë–º 5000 –Ω–æ—Ç–æ–∫–æ–∏–Ω–æ–≤
    cursor.execute(
        "UPDATE users SET note_coins = note_coins + 5000, has_nyan_mp3 = 1 WHERE user_id = ?",
        (user_id,),
    )
    conn.commit()

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª 5000 –Ω–æ—Ç–æ–∫–æ–∏–Ω–æ–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {note_coins + 5000}")

    await message.answer(
        "–¢—ã –Ω–∞—à—ë–ª —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É! üéâ\n\n"
        "–¢—ã –ø–æ–ª—É—á–∏–ª 5000 –Ω–æ—Ç–æ–∫–æ–∏–Ω–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö —Å —É–º–æ–º.\n\n"
        "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è, —Ç–∞–∫ —á—Ç–æ –±–æ–ª—å—à–µ —Ç—ã –µ—ë –Ω–µ —Å–º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å. üòâ"
    )



async def initndr_command(message: types.Message):
    user_id = message.from_user.id

    cursor.execute("SELECT user_id, has_initndr FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()

    if not user_data:
        cursor.execute(
            "INSERT INTO users (user_id, rarity, points, highest_rarity, cat_coins, magic_coins, has_initndr) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (user_id, "–æ–±—ã—á–Ω—ã–π", 0, "–æ–±—ã—á–Ω—ã–π", 0, 0, 0),
        )
        conn.commit()
        has_initndr = 0
    else:
        user_id, has_initndr = user_data

    if has_initndr:
        await message.answer("–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É! –û–Ω–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è. üòâ")
        return

    cursor.execute(
        "UPDATE users SET magic_coins = magic_coins + 5000, has_initndr = 1 WHERE user_id = ?",
        (user_id,),
    )
    conn.commit()

    await message.answer(
        "–¢—ã –Ω–∞—à—ë–ª —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É! üéâ\n\n"
        "–¢—ã –ø–æ–ª—É—á–∏–ª 5000 –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–∏–Ω–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö —Å —É–º–æ–º.\n\n"
        "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è, —Ç–∞–∫ —á—Ç–æ –±–æ–ª—å—à–µ —Ç—ã –µ—ë –Ω–µ —Å–º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å. üòâ"
    )

async def MrLololoshka_command(message: types.Message):
    user_id = message.from_user.id

    cursor.execute("SELECT user_id, has_MrLololoshka FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()

    if not user_data:
        cursor.execute(
            "INSERT INTO users (user_id, rarity, points, highest_rarity, cat_coins, magic_coins, has_MrLololoshka) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (user_id, "–æ–±—ã—á–Ω—ã–π", 0, "–æ–±—ã—á–Ω—ã–π", 0, 0, 0),
        )
        conn.commit()
        has_MrLololoshka = 0
    else:
        user_id, has_MrLololoshka = user_data

    if has_MrLololoshka:
        await message.answer("–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É! –û–Ω–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è. üòâ")
        return

    cursor.execute(
        "UPDATE users SET points = points + 40000, has_MrLololoshka = 1 WHERE user_id = ?",
        (user_id,),
    )
    conn.commit()

    await message.answer(
        "–¢—ã –Ω–∞—à—ë–ª —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É! üéâ\n\n"
        "–¢—ã –ø–æ–ª—É—á–∏–ª 40000 –æ—á–∫–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö —Å —É–º–æ–º.\n\n"
        "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è, —Ç–∞–∫ —á—Ç–æ –±–æ–ª—å—à–µ —Ç—ã –µ—ë –Ω–µ —Å–º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å. üòâ"
    )

with open('config.json', 'r', encoding='utf-8') as config_file:
    config = json.load(config_file)

async def on_bot_added_to_group(event: types.ChatMemberUpdated):
    if event.new_chat_member.status == 'member' and event.new_chat_member.user.id == event.bot.id:
        await event.bot.send_message(
            event.chat.id,
            "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–æ–≤—ã–π –∫–∞—Ä—Ç–æ—á–Ω—ã–π –±–æ—Ç –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ, –Ω–∞–ø–∏—à–∏—Ç–µ '–∫–æ—Ç' –∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –º–µ–º–Ω–æ–≥–æ –∫–æ—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bonus –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ú–∞–≥–∏—á–µ—Å–∫–∞—è –±–∏—Ç–≤–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–∞–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç–æ—á–∫—É."
        )

try:
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
except sqlite3.Error as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    raise

def check_and_add_magic_scroll_column():
    try:
        cursor.execute("PRAGMA table_info(users)")
        columns = cursor.fetchall()
        if "has_magic_scroll" not in [column[1] for column in columns]:
            cursor.execute("ALTER TABLE users ADD COLUMN has_magic_scroll INTEGER DEFAULT 0")
            conn.commit()
            logging.info("–°—Ç–æ–ª–±–µ—Ü has_magic_scroll –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É users.")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ has_magic_scroll: {e}")



check_and_add_magic_scroll_column()

def create_user_cards_table():
    try:
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_cards (
                user_id INTEGER,
                card_id TEXT,
                username,
                FOREIGN KEY (user_id) REFERENCES users(user_id),
                FOREIGN KEY (card_id) REFERENCES cards(cat_id),
                PRIMARY KEY (user_id, card_id)
            );
        ''')
        conn.commit()
        logging.info("–¢–∞–±–ª–∏—Ü–∞ user_cards —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã user_cards: {e}")

create_user_cards_table()

def add_initndr_column():
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN has_initndr INTEGER DEFAULT 0")
        conn.commit()
        logging.info("–°—Ç–æ–ª–±–µ—Ü has_initndr –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É users.")
    except sqlite3.OperationalError as e:
        logging.warning(f"–°—Ç–æ–ª–±–µ—Ü has_initndr —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")

add_initndr_column()

def add_HiTmaN_VadIM_column():
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN has_HiTmaN_VadIM INTEGER DEFAULT 0")
        conn.commit()
        logging.info("–°—Ç–æ–ª–±–µ—Ü HiTmaN_VadIM –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É users.")
    except sqlite3.OperationalError as e:
        logging.warning(f"–°—Ç–æ–ª–±–µ—Ü HiTmaN_VadIM —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")

add_HiTmaN_VadIM_column()

def add_MrLololoshka_column():
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN has_MrLololoshka INTEGER DEFAULT 0")
        conn.commit()
        logging.info("–°—Ç–æ–ª–±–µ—Ü has_MrLololoshka –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É users.")
    except sqlite3.OperationalError as e:
        logging.warning(f"–°—Ç–æ–ª–±–µ—Ü has_MrLololoshka —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")

add_MrLololoshka_column()

async def HiTmaN_VadIM_command(message: types.Message):
    user_id = message.from_user.id

    cursor.execute("SELECT user_id, has_HiTmaN_VadIM FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()

    if not user_data:
        cursor.execute(
            "INSERT INTO users (user_id, rarity, points, highest_rarity, cat_coins, magic_coins, has_HiTmaN_VadIM) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (user_id, "–æ–±—ã—á–Ω—ã–π", 0, "–æ–±—ã—á–Ω—ã–π", 0, 0, 0),
        )
        conn.commit()
        has_HiTmaN_VadIM = 0
    else:
        user_id, has_HiTmaN_VadIM = user_data

    if has_HiTmaN_VadIM:
        await message.answer("–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É! –û–Ω–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è. üòâ")
        return

    cursor.execute(
        "UPDATE users SET cat_coins = cat_coins + 5000, has_HiTmaN_VadIM = 1 WHERE user_id = ?",
        (user_id,),
    )
    conn.commit()

    await message.answer(
        "–¢—ã –Ω–∞—à—ë–ª —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É! üéâ\n\n"
        "–¢—ã –ø–æ–ª—É—á–∏–ª 5000 –ö–æ—Ç–æ–∫–æ–∏–Ω–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö —Å —É–º–æ–º.\n\n"
        "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è, —Ç–∞–∫ —á—Ç–æ –±–æ–ª—å—à–µ —Ç—ã –µ—ë –Ω–µ —Å–º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å. üòâ"
    )

try:
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users';")
    if not cursor.fetchone():
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            rarity TEXT,
            username TEXT,
            points INTEGER DEFAULT 0,
            highest_rarity TEXT DEFAULT '–æ–±—ã—á–Ω—ã–π',
            cat_coins INTEGER DEFAULT 0,
            last_cat_time INTEGER DEFAULT 0,
            last_bonus_time INTEGER DEFAULT 0,
            last_put_time INTEGER DEFAULT 0,
            has_scratcher INTEGER DEFAULT 0,
            has_companion INTEGER DEFAULT 0,
            booster_end_time INTEGER DEFAULT 0,
            has_time_watch INTEGER DEFAULT 0,
            magic_coins INTEGER DEFAULT 0,
            medallion_end_time INTEGER DEFAULT 0,
            has_magic_luck_scroll INTEGER DEFAULT 0,
            last_magic_time INTEGER DEFAULT 0,
            has_wishing_fountain INTEGER DEFAULT 0
            );
        ''')
        conn.commit()
        logging.info("–¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞ –≤ ledersboard.py.")
    else:
        logging.info("–¢–∞–±–ª–∏—Ü–∞ users —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ ledersboard.py.")
except:
    cursor.execute("SELECT user_id, username, cat_coins, magic_coins, points FROM users;")
    result = cursor.fetchall()
    print(result)

def check_and_create_tables():
    try:
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='cards'")
        if not cursor.fetchone():
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS cards (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username,
                    user_id INTEGER,
                    cat_id TEXT,
                    cat_image TEXT,
                    rarity TEXT,
                    points INTEGER,
                    FOREIGN KEY (user_id) REFERENCES users(user_id),
                    UNIQUE(user_id, cat_id)
                );
            ''')
            conn.commit()
            print("–¢–∞–±–ª–∏—Ü–∞ cards —Å–æ–∑–¥–∞–Ω–∞.")
        else:
            print("–¢–∞–±–ª–∏—Ü–∞ cards —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã cards: {e}")

check_and_create_tables()

rarities = [
    "–æ–±—ã—á–Ω—ã–π",
    "—Ä–µ–¥–∫–∏–π",
    "—Å–≤–µ—Ä—Ö—Ä–µ–¥–∫–∏–π",
    "—ç–ø–∏—á–µ—Å–∫–∏–π",
    "–º–∏—Ñ–∏—á–µ—Å–∫–∏–π",
    "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π",
    "—Ö—Ä–æ–º–æ—Ç–∏—á–µ—Å–∫–∏–π",
    "–æ—Å–æ–±—ã–π"
]

cooldown_cat = config['cooldowns']['cat']
cooldown_bonus = config['cooldowns']['bonus']
cooldown_put = config['cooldowns']['put']

cooldowns = {}
bonus_cooldowns = {}

def get_random_cat(cats, has_magic_luck_scroll=False):
    weighted_cats = []
    for cat in cats:
        if has_magic_luck_scroll:
            if cat["rarity"] in ["—Å–≤–µ—Ä—Ö—Ä–µ–¥–∫–∏–π", "—ç–ø–∏—á–µ—Å–∫–∏–π", "–º–∏—Ñ–∏—á–µ—Å–∫–∏–π", "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", "—Ö—Ä–æ–º–æ—Ç–∏—á–µ—Å–∫–∏–π", "–æ—Å–æ–±—ã–π"]:
                weight = rarity_weights.get(cat["rarity"], 1)
                weighted_cats.extend([cat] * weight)
        else:
            weight = rarity_weights.get(cat["rarity"], 1)
            weighted_cats.extend([cat] * weight)
    return random.choice(weighted_cats)

def get_user_points(user_id):
    cursor.execute("SELECT points FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

def get_user_cat_coins(user_id):
    cursor.execute("SELECT cat_coins FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

def get_user_magic_coins(user_id):
    cursor.execute("SELECT magic_coins FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

async def help_command(message: types.Message):
    if not await check_name(message):
        return
    await message.answer(
        "‚ú® –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: ‚ú®\n\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n"
        "üëã /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n"
        "üê± –∫–æ—Ç - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ—Ç–∞ (–∫—É–ª–¥–∞—É–Ω: 3 —á–∞—Å–∞, –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç)\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n"
        "üéÅ /bonus - –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ—Ç–∞ (–∫—É–ª–¥–∞—É–Ω: 6 —á–∞—Å–æ–≤)\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n"
        "üõí /shop - –ú–∞–≥–∞–∑–∏–Ω \n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n"
        "üë§ /profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n"
        "ü§ó /put - –ü–æ–≥–ª–∞–¥–∏—Ç—å –∫–æ—Ç–∏–∫–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å 1000 –æ—á–∫–æ–≤ –∏ 500 –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ß–µ—Å–∞–ª–∫–∞, –∫—É–ª–¥–∞—É–Ω: 2 —á–∞—Å–∞)\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n"
        "üìö /collection - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é –∫–∞—Ä—Ç–æ—á–µ–∫\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n"
        "üêæ /cat - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ—Ç–∞ (–∫—É–ª–¥–∞—É–Ω: 3 —á–∞—Å–∞)\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n"
        "‚öîÔ∏è –ë–∏—Ç–≤–∞ - –ü–æ–ª—É—á–∏—Ç—å –º–∞–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É (–ü–∏—Å–∞—Ç—å –≤ —á–∞—Ç)\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n"
        "ü™Ñ /jujitsu - –ü–æ–ª—É—á–∏—Ç—å –º–∞–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n"
        "üë§ /avatar - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n"
        "üéµ /melody - –ò–≥—Ä–∞ —É–≥–∞–¥–∞–π –º–µ–º\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n"
        "üéÅ /daily - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n"
        "üéÅ /daily_strike - –í–∞—à —Å—Ç—Ä–∞–π–∫ –ø–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –Ω–∞–≥—Ä–∞–¥–∞–º\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n"
        "üèÜ /leders - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n"
        "üîÑ /exchange - –û–±–º–µ–Ω –≤–∞–ª—é—Ç\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n"
        "üñã /name –∏ /rename - –í—ã–±–æ—Ä –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n"
        "https://t.me/MagicAndMemeCatsClash - –ù–∞—à –∫–∞–Ω–∞–ª –±–æ—Ç–∞\n"
    )

async def cat_command(message: types.Message):
    if message.text.lower() not in ["–∫–æ—Ç"] + cat_synonyms:
        return
    if not await check_name(message):
        return
    user_id = message.from_user.id
    current_time = time.time()

    cursor.execute(
        "SELECT has_time_watch, has_magic_luck_scroll, has_initndr, has_HiTmaN_VadIM, has_MrLololoshka, has_nyan_mp3 FROM users WHERE user_id = ?",
        (user_id,)
    )
    user_data = cursor.fetchone()

    if not user_data:
        cursor.execute(
            "INSERT INTO users (user_id, rarity, points, highest_rarity, cat_coins, has_initndr, has_HiTmaN_VadIM, has_MrLololoshka, has_nyan_mp3) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
            (user_id, "–æ–±—ã—á–Ω—ã–π", 0, "–æ–±—ã—á–Ω—ã–π", 0, 0, 0, 0),
        )
        conn.commit()
        has_time_watch = 0
        has_magic_luck_scroll = 0
        has_initndr = 0
        has_HiTmaN_VadIM = 0
        has_MrLololoshka = 0
        has_nyan_mp3 = 0
    else:
        has_time_watch, has_magic_luck_scroll, has_initndr, has_HiTmaN_VadIM, has_MrLololoshka, has_nyan_mp3 = user_data

    if has_time_watch:
        cooldowns[user_id] = 0
        cursor.execute("UPDATE users SET has_time_watch = 0 WHERE user_id = ?", (user_id,))
        conn.commit()

    if user_id in cooldowns:
        remaining_time = config['cooldowns']['cat'] - (current_time - cooldowns[user_id])
        if remaining_time > 0:
            hours = int(remaining_time // 3600)
            minutes = int((remaining_time % 3600) // 60)
            await message.answer(
                f"–í—ã –æ—Å–º–æ—Ç—Ä–µ–ª–∏—Å—å, –Ω–æ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ—Ç–∞ –Ω–∞ –¥–∏–≤–∞–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç."
            )
            return

    cooldowns[user_id] = current_time

    if random.random() < 0.1 and not has_initndr:
        await message.answer(
            "–¢—ã –Ω–∞—à—ë–ª —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ... ü§î\n\n"
            "–ö–∞–∂–µ—Ç—Å—è, –≥–¥–µ-—Ç–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ —Å–ø—Ä—è—Ç–∞–Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ –µ—ë, –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å –Ω–∞–≥—Ä–∞–¥—É! üéÅ\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /init... üòâ"
        )
        return

    if random.random() < 0.1 and not has_nyan_mp3:
        await message.answer(
            "–¢—ã –Ω–∞—à—ë–ª —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ... ü§î\n\n"
            "–ö–∞–∂–µ—Ç—Å—è, –≥–¥–µ-—Ç–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ —Å–ø—Ä—è—Ç–∞–Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ –µ—ë, –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å –Ω–∞–≥—Ä–∞–¥—É! üéÅ\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /nyan... üòâ"
        )
        return

    if random.random() < 0.1 and not has_HiTmaN_VadIM:
        await message.answer(
            "–¢—ã –Ω–∞—à—ë–ª —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ... ü§î\n\n"
            "–ö–∞–∂–µ—Ç—Å—è, –≥–¥–µ-—Ç–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ —Å–ø—Ä—è—Ç–∞–Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ –µ—ë, –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å –Ω–∞–≥—Ä–∞–¥—É! üéÅ\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /HiTmaN_... üòâ"
        )
        return

    if random.random() < 0.1 and not has_MrLololoshka:
        await message.answer(
            "–¢—ã –Ω–∞—à—ë–ª —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ... ü§î\n\n"
            "–ö–∞–∂–µ—Ç—Å—è, –≥–¥–µ-—Ç–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ —Å–ø—Ä—è—Ç–∞–Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ –µ—ë, –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å –Ω–∞–≥—Ä–∞–¥—É! üéÅ\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /MrLolo... üòâ"
        )
        return

    cursor.execute("SELECT booster_end_time FROM users WHERE user_id = ?", (user_id,))
    booster_end_time = cursor.fetchone()[0]
    is_booster_active = booster_end_time and booster_end_time > current_time

    if is_booster_active:
        points_multiplier = 1.5
        coins_multiplier = 1.5
    else:
        points_multiplier = 1.0
        coins_multiplier = 1.0

    cursor.execute("SELECT has_companion FROM users WHERE user_id = ?", (user_id,))
    has_companion = cursor.fetchone()[0]

    if has_companion:
        num_cards = 2
        cursor.execute("UPDATE users SET has_companion = 0 WHERE user_id = ?", (user_id,))
        conn.commit()
    else:
        num_cards = 1

    for _ in range(num_cards):
        cat = get_random_cat(cats, has_magic_luck_scroll)

        cat["points"] = int(cat["points"] * points_multiplier)
        cat["cat_coins"] = int(cat["cat_coins"] * coins_multiplier)

        rarities_str = ", ".join(rarities)

        try:
            rarities_str = "–æ–±—ã—á–Ω—ã–π,—Ä–µ–¥–∫–∏–π,—Å–≤–µ—Ä—Ö—Ä–µ–¥–∫–∏–π,—ç–ø–∏—á–µ—Å–∫–∏–π,–º–∏—Ñ–∏—á–µ—Å–∫–∏–π,–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π,—Ö—Ä–æ–º–æ—Ç–∏—á–µ—Å–∫–∏–π,–æ—Å–æ–±—ã–π"
            cursor.execute(
                f"""
                INSERT INTO users (user_id, rarity, points, highest_rarity, cat_coins) VALUES (?, ?, ?, ?, ?)
                ON CONFLICT(user_id) DO UPDATE SET 
                    rarity = excluded.rarity, 
                    points = points + excluded.points, 
                    highest_rarity = CASE 
                        WHEN highest_rarity IS NULL THEN excluded.rarity
                        WHEN INSTR('{rarities_str}', excluded.rarity) > INSTR('{rarities_str}', highest_rarity) THEN excluded.rarity 
                        ELSE highest_rarity 
                    END,
                    cat_coins = cat_coins + excluded.cat_coins
                """,
                (
                    user_id,
                    cat["rarity"],
                    cat["points"],
                    cat["rarity"],
                    cat["cat_coins"],
                ),
            )
            conn.commit()

            cursor.execute(
                "SELECT id FROM cards WHERE user_id = ? AND cat_id = ?",
                (user_id, cat["id"]),
            )
            existing_card = cursor.fetchone()

            if existing_card:
                cursor.execute(
                    "DELETE FROM cards WHERE user_id = ? AND cat_id = ?",
                    (user_id, cat["id"]),
                )
                conn.commit()

            cursor.execute(
                "INSERT INTO cards (user_id, cat_id, cat_image, rarity, points) VALUES (?, ?, ?, ?, ?)",
                (user_id, cat["id"], cat["photo"], cat["rarity"], cat["points"]),
            )
            conn.commit()

            cursor.execute("SELECT username FROM users WHERE user_id = ?", (user_id,))
            user_data = cursor.fetchone()
            db_username = user_data[0] if user_data else None

            try:
                user = await message.bot.get_chat(user_id)
                tg_username = user.username
                tg_first_name = user.first_name
            except Exception as e:
                tg_username = None
                tg_first_name = None

            if db_username:
                display_name = db_username
            elif tg_username:
                display_name = f"@{tg_username}"
            elif tg_first_name:
                display_name = tg_first_name
            else:
                display_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"

            message_text = (
                f"üë§ {display_name}, —É—Å–ø–µ—Ö! –í—ã –Ω–∞—à–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É. \n"
                f"üåü –ö–∞—Ä—Ç–æ—á–∫–∞ ¬´{cat['catname']}¬ª üê±\n"
                "--------------------------\n"
                f"üíé –†–µ–¥–∫–æ—Å—Ç—å: {cat['rarity']}\n"
                f"‚ú® –û—á–∫–∏: +{cat['points']} (–í—Å–µ–≥–æ: {get_user_points(user_id)})\n"
                f"üê± –ö–æ—Ç–æ–∫–æ–∏–Ω—ã: +{cat['cat_coins']} (–í—Å–µ–≥–æ: {get_user_cat_coins(user_id)})\n"
                f"üßß –û–ø–∏—Å–∞–Ω–∏–µ: {cat['catinfo']}\n"
            )

            if is_booster_active:
                message_text += "üöÄ –ê–∫—Ç–∏–≤–µ–Ω –ö–æ—Ç-–±—É—Å—Ç–µ—Ä: +50% –æ—á–∫–æ–≤ –∏ –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤!\n"

            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("üîÑ –ü–æ–ª—É—á–∏—Ç—å –µ—â–µ –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="get_another_card"),
                InlineKeyboardButton("üìö –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é", callback_data="view_collection")
            )

            await message.bot.send_photo(
                chat_id=message.chat.id,
                photo=cat["photo"],
                caption=message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_to_message_id=message.message_id,
                reply_markup=keyboard,
            )


            user_progress = await load_user_progress(user_id)
            if user_progress and not user_progress["completed"]:
                if user_progress["category"] == "cat":

                    await update_quest_progress(user_id, "cat")


                    if cat["rarity"] in ["—Ä–µ–¥–∫–∏–π", "—Å–≤–µ—Ä—Ö—Ä–µ–¥–∫–∏–π", "—ç–ø–∏—á–µ—Å–∫–∏–π", "–º–∏—Ñ–∏—á–µ—Å–∫–∏–π", "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π",
                                         "—Ö—Ä–æ–º–æ—Ç–∏—á–µ—Å–∫–∏–π"]:
                        await update_quest_progress(user_id, "cat_rare")


        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


    if has_magic_luck_scroll:
        cursor.execute("UPDATE users SET has_magic_luck_scroll = 0 WHERE user_id = ?", (user_id,))
        conn.commit()



async def send_cat(message: types.Message):
    if message.text.lower() not in ["–∫–æ—Ç"] + cat_synonyms:
        return
    if not await check_name(message):
        return
    user_id = message.from_user.id
    current_time = time.time()

    cursor.execute(
        "SELECT has_time_watch, has_magic_luck_scroll, has_initndr, has_HiTmaN_VadIM, has_MrLololoshka, has_nyan_mp3 FROM users WHERE user_id = ?",
        (user_id,)
    )
    user_data = cursor.fetchone()

    if not user_data:
        cursor.execute(
            "INSERT INTO users (user_id, rarity, points, highest_rarity, cat_coins, has_initndr, has_HiTmaN_VadIM, has_MrLololoshka, has_nyan_mp3) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
            (user_id, "–æ–±—ã—á–Ω—ã–π", 0, "–æ–±—ã—á–Ω—ã–π", 0, 0, 0, 0),
        )
        conn.commit()
        has_time_watch = 0
        has_magic_luck_scroll = 0
        has_initndr = 0
        has_HiTmaN_VadIM = 0
        has_MrLololoshka = 0
        has_nyan_mp3 = 0
    else:
        has_time_watch, has_magic_luck_scroll, has_initndr, has_HiTmaN_VadIM, has_MrLololoshka, has_nyan_mp3 = user_data

    if has_time_watch:
        cooldowns[user_id] = 0
        cursor.execute("UPDATE users SET has_time_watch = 0 WHERE user_id = ?", (user_id,))
        conn.commit()

    if user_id in cooldowns:
        remaining_time = config['cooldowns']['cat'] - (current_time - cooldowns[user_id])
        if remaining_time > 0:
            hours = int(remaining_time // 3600)
            minutes = int((remaining_time % 3600) // 60)
            await message.answer(
                f"–í—ã –æ—Å–º–æ—Ç—Ä–µ–ª–∏—Å—å, –Ω–æ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ—Ç–∞ –Ω–∞ –¥–∏–≤–∞–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç."
            )
            return

    cooldowns[user_id] = current_time

    if random.random() < 0.1 and not has_initndr:
        await message.answer(
            "–¢—ã –Ω–∞—à—ë–ª —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ... ü§î\n\n"
            "–ö–∞–∂–µ—Ç—Å—è, –≥–¥–µ-—Ç–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ —Å–ø—Ä—è—Ç–∞–Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ –µ—ë, –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å –Ω–∞–≥—Ä–∞–¥—É! üéÅ\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /init... üòâ"
        )
        return

    if random.random() < 0.1 and not has_nyan_mp3:
        await message.answer(
            "–¢—ã –Ω–∞—à—ë–ª —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ... ü§î\n\n"
            "–ö–∞–∂–µ—Ç—Å—è, –≥–¥–µ-—Ç–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ —Å–ø—Ä—è—Ç–∞–Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ –µ—ë, –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å –Ω–∞–≥—Ä–∞–¥—É! üéÅ\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /nyan... üòâ"
        )
        return

    if random.random() < 0.1 and not has_HiTmaN_VadIM:
        await message.answer(
            "–¢—ã –Ω–∞—à—ë–ª —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ... ü§î\n\n"
            "–ö–∞–∂–µ—Ç—Å—è, –≥–¥–µ-—Ç–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ —Å–ø—Ä—è—Ç–∞–Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ –µ—ë, –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å –Ω–∞–≥—Ä–∞–¥—É! üéÅ\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /HiTmaN_... üòâ"
        )
        return

    if random.random() < 0.1 and not has_MrLololoshka:
        await message.answer(
            "–¢—ã –Ω–∞—à—ë–ª —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ... ü§î\n\n"
            "–ö–∞–∂–µ—Ç—Å—è, –≥–¥–µ-—Ç–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ —Å–ø—Ä—è—Ç–∞–Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ –µ—ë, –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å –Ω–∞–≥—Ä–∞–¥—É! üéÅ\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /MrLolo... üòâ"
        )
        return

    cursor.execute("SELECT booster_end_time FROM users WHERE user_id = ?", (user_id,))
    booster_end_time = cursor.fetchone()[0]
    is_booster_active = booster_end_time and booster_end_time > current_time

    if is_booster_active:
        points_multiplier = 1.5
        coins_multiplier = 1.5
    else:
        points_multiplier = 1.0
        coins_multiplier = 1.0

    cursor.execute("SELECT has_companion FROM users WHERE user_id = ?", (user_id,))
    has_companion = cursor.fetchone()[0]

    if has_companion:
        num_cards = 2
        cursor.execute("UPDATE users SET has_companion = 0 WHERE user_id = ?", (user_id,))
        conn.commit()
    else:
        num_cards = 1

    for _ in range(num_cards):
        cat = get_random_cat(cats, has_magic_luck_scroll)

        cat["points"] = int(cat["points"] * points_multiplier)
        cat["cat_coins"] = int(cat["cat_coins"] * coins_multiplier)

        rarities_str = ", ".join(rarities)

        try:
            rarities_str = "–æ–±—ã—á–Ω—ã–π,—Ä–µ–¥–∫–∏–π,—Å–≤–µ—Ä—Ö—Ä–µ–¥–∫–∏–π,—ç–ø–∏—á–µ—Å–∫–∏–π,–º–∏—Ñ–∏—á–µ—Å–∫–∏–π,–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π,—Ö—Ä–æ–º–æ—Ç–∏—á–µ—Å–∫–∏–π,–æ—Å–æ–±—ã–π"
            cursor.execute(
                f"""
                INSERT INTO users (user_id, rarity, points, highest_rarity, cat_coins) VALUES (?, ?, ?, ?, ?)
                ON CONFLICT(user_id) DO UPDATE SET 
                    rarity = excluded.rarity, 
                    points = points + excluded.points, 
                    highest_rarity = CASE 
                        WHEN highest_rarity IS NULL THEN excluded.rarity
                        WHEN INSTR('{rarities_str}', excluded.rarity) > INSTR('{rarities_str}', highest_rarity) THEN excluded.rarity 
                        ELSE highest_rarity 
                    END,
                    cat_coins = cat_coins + excluded.cat_coins
                """,
                (
                    user_id,
                    cat["rarity"],
                    cat["points"],
                    cat["rarity"],
                    cat["cat_coins"],
                ),
            )
            conn.commit()

            cursor.execute(
                "SELECT id FROM cards WHERE user_id = ? AND cat_id = ?",
                (user_id, cat["id"]),
            )
            existing_card = cursor.fetchone()

            if existing_card:
                cursor.execute(
                    "DELETE FROM cards WHERE user_id = ? AND cat_id = ?",
                    (user_id, cat["id"]),
                )
                conn.commit()

            cursor.execute(
                "INSERT INTO cards (user_id, cat_id, cat_image, rarity, points) VALUES (?, ?, ?, ?, ?)",
                (user_id, cat["id"], cat["photo"], cat["rarity"], cat["points"]),
            )
            conn.commit()

            cursor.execute("SELECT username FROM users WHERE user_id = ?", (user_id,))
            user_data = cursor.fetchone()
            db_username = user_data[0] if user_data else None

            try:
                user = await message.bot.get_chat(user_id)
                tg_username = user.username
                tg_first_name = user.first_name
            except Exception as e:
                tg_username = None
                tg_first_name = None

            if db_username:
                display_name = db_username
            elif tg_username:
                display_name = f"@{tg_username}"
            elif tg_first_name:
                display_name = tg_first_name
            else:
                display_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"

            message_text = (
                f"üë§ {display_name}, —É—Å–ø–µ—Ö! –í—ã –Ω–∞—à–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É. \n"
                f"üåü –ö–∞—Ä—Ç–æ—á–∫–∞ ¬´{cat['catname']}¬ª üê±\n"
                "--------------------------\n"
                f"üíé –†–µ–¥–∫–æ—Å—Ç—å: {cat['rarity']}\n"
                f"‚ú® –û—á–∫–∏: +{cat['points']} (–í—Å–µ–≥–æ: {get_user_points(user_id)})\n"
                f"üê± –ö–æ—Ç–æ–∫–æ–∏–Ω—ã: +{cat['cat_coins']} (–í—Å–µ–≥–æ: {get_user_cat_coins(user_id)})\n"
                f"üßß –û–ø–∏—Å–∞–Ω–∏–µ: {cat['catinfo']}\n"
            )

            if is_booster_active:
                message_text += "üöÄ –ê–∫—Ç–∏–≤–µ–Ω –ö–æ—Ç-–±—É—Å—Ç–µ—Ä: +50% –æ—á–∫–æ–≤ –∏ –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤!\n"

            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("üîÑ –ü–æ–ª—É—á–∏—Ç—å –µ—â–µ –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="get_another_card"),
                InlineKeyboardButton("üìö –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é", callback_data="view_collection")
            )

            await message.bot.send_photo(
                chat_id=message.chat.id,
                photo=cat["photo"],
                caption=message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_to_message_id=message.message_id,
                reply_markup=keyboard,
            )


            user_progress = await load_user_progress(user_id)
            if user_progress and not user_progress["completed"]:
                if user_progress["category"] == "cat":

                    await update_quest_progress(user_id, "cat")


                    if cat["rarity"] in ["—Ä–µ–¥–∫–∏–π", "—Å–≤–µ—Ä—Ö—Ä–µ–¥–∫–∏–π", "—ç–ø–∏—á–µ—Å–∫–∏–π", "–º–∏—Ñ–∏—á–µ—Å–∫–∏–π", "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π",
                                         "—Ö—Ä–æ–º–æ—Ç–∏—á–µ—Å–∫–∏–π"]:
                        await update_quest_progress(user_id, "cat_rare")


        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


    if has_magic_luck_scroll:
        cursor.execute("UPDATE users SET has_magic_luck_scroll = 0 WHERE user_id = ?", (user_id,))
        conn.commit()
async def bonus_command(message: types.Message):
    logging.info("–ö–æ–º–∞–Ω–¥–∞ /bonus –≤—ã–∑–≤–∞–Ω–∞")
    if not await check_name(message):
        logging.warning("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        return

    user_id = message.from_user.id
    current_time = time.time()

    if user_id in bonus_cooldowns:
        remaining_time = 21600 - (current_time - bonus_cooldowns[user_id])
        if remaining_time > 0:
            hours = int(remaining_time // 3600)
            minutes = int((remaining_time % 3600) // 60)
            await message.answer(
                f"–í—ã –æ—Å–º–æ—Ç—Ä–µ–ª–∏—Å—å, –Ω–æ –Ω–µ –Ω–∞—à–ª–∏ –±–æ–Ω—É—Å –Ω–∞ –ø–æ–ª–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç."
            )
            return

    bonus_cooldowns[user_id] = current_time

    cursor.execute("SELECT has_initndr FROM users WHERE user_id = ?", (user_id,))
    has_initndr = cursor.fetchone()[0]

    cursor.execute("SELECT has_HiTmaN_VadIM FROM users WHERE user_id = ?", (user_id,))
    has_HiTmaN_VadIM = cursor.fetchone()[0]

    cursor.execute("SELECT has_MrLololoshka FROM users WHERE user_id = ?", (user_id,))
    has_MrLololoshka = cursor.fetchone()[0]

    cursor.execute("SELECT has_nyan_mp3 FROM users WHERE user_id = ?", (user_id,))
    has_nyan_mp3 = cursor.fetchone()[0]

    if random.random() < 0.1 and not has_initndr:
        await message.answer(
            "–¢—ã –Ω–∞—à—ë–ª —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ... ü§î\n\n"
            "–ö–∞–∂–µ—Ç—Å—è, –≥–¥–µ-—Ç–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ —Å–ø—Ä—è—Ç–∞–Ω–∞ –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ –µ—ë, –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å –Ω–∞–≥—Ä–∞–¥—É! üéÅ\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –∫–æ–Ω—á–∞–µ—Ç—Å—è –Ω–∞ /...ndr üòâ"
        )
        return

    if random.random() < 0.1 and not has_HiTmaN_VadIM:
        await message.answer(
            "–¢—ã –Ω–∞—à—ë–ª —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ... ü§î\n\n"
            "–ö–∞–∂–µ—Ç—Å—è, –≥–¥–µ-—Ç–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ —Å–ø—Ä—è—Ç–∞–Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ –µ—ë, –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å –Ω–∞–≥—Ä–∞–¥—É! üéÅ\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –∫–æ–Ω—á–∞–µ—Ç—Å—è –Ω–∞ /...VadIM üòâ"
        )
        return

    if random.random() < 0.1 and not has_nyan_mp3:
        await message.answer(
            "–¢—ã –Ω–∞—à—ë–ª —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ... ü§î\n\n"
            "–ö–∞–∂–µ—Ç—Å—è, –≥–¥–µ-—Ç–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ —Å–ø—Ä—è—Ç–∞–Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ –µ—ë, –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å –Ω–∞–≥—Ä–∞–¥—É! üéÅ\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –∫–æ–Ω—á–∞–µ—Ç—Å—è –Ω–∞ ...mp3 üòâ"
        )
        return

    if random.random() < 0.1 and not has_MrLololoshka:
        await message.answer(
            "–¢—ã –Ω–∞—à—ë–ª —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ... ü§î\n\n"
            "–ö–∞–∂–µ—Ç—Å—è, –≥–¥–µ-—Ç–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ —Å–ø—Ä—è—Ç–∞–Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ –µ—ë, –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å –Ω–∞–≥—Ä–∞–¥—É! üéÅ\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –∫–æ–Ω—á–∞–µ—Ç—Å—è –Ω–∞ /...loshka üòâ"
        )
        return

    bonus_cooldowns[user_id] = current_time

    cat = get_random_cat(cats)

    rarities_str = ", ".join(rarities)

    try:
        rarities_str = "–æ–±—ã—á–Ω—ã–π,—Ä–µ–¥–∫–∏–π,—Å–≤–µ—Ä—Ö—Ä–µ–¥–∫–∏–π,—ç–ø–∏—á–µ—Å–∫–∏–π,–º–∏—Ñ–∏—á–µ—Å–∫–∏–π,–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π,—Ö—Ä–æ–º–æ—Ç–∏—á–µ—Å–∫–∏–π,–æ—Å–æ–±—ã–π"
        cursor.execute(
            f"""
            INSERT INTO users (user_id, rarity, points, highest_rarity, cat_coins) VALUES (?, ?, ?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET 
                rarity = excluded.rarity, 
                points = points + excluded.points, 
                highest_rarity = CASE 
                    WHEN highest_rarity IS NULL THEN excluded.rarity
                    WHEN INSTR('{rarities_str}', excluded.rarity) > INSTR('{rarities_str}', highest_rarity) THEN excluded.rarity 
                    ELSE highest_rarity 
                END,
                cat_coins = cat_coins + excluded.cat_coins
            """,
            (
                user_id,
                cat["rarity"],
                cat["points"],
                cat["rarity"],
                cat["cat_coins"],
            ),
        )
        conn.commit()

        cursor.execute(
            "SELECT id FROM cards WHERE user_id = ? AND cat_id = ?",
            (user_id, cat["id"]),
        )
        existing_card = cursor.fetchone()

        if existing_card:
            cursor.execute(
                "DELETE FROM cards WHERE user_id = ? AND cat_id = ?",
                (user_id, cat["id"]),
            )
            conn.commit()

        cursor.execute(
            "INSERT INTO cards (user_id, cat_id, cat_image, rarity, points) VALUES (?, ?, ?, ?, ?)",
            (user_id, cat["id"], cat["photo"], cat["rarity"], cat["points"]),
        )
        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT username FROM users WHERE user_id = ?", (user_id,))
        user_data = cursor.fetchone()
        db_username = user_data[0] if user_data else None

        try:
            user = await message.bot.get_chat(user_id)
            tg_username = user.username
            tg_first_name = user.first_name
        except Exception as e:
            tg_username = None
            tg_first_name = None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º display_name
        if db_username:
            display_name = db_username
        elif tg_username:
            display_name = f"@{tg_username}"
        elif tg_first_name:
            display_name = tg_first_name
        else:
            display_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"

        message_text = (
            f"üë§ {display_name}, —É—Å–ø–µ—Ö! –í—ã –Ω–∞—à–ª–∏ –±–æ–Ω—É—Å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É. \n"
            f"üåü –ö–∞—Ä—Ç–æ—á–∫–∞: ¬´{cat['catname']}¬ª üê±\n"
            "--------------------------\n"
            f"üíé –†–µ–¥–∫–æ—Å—Ç—å: {cat['rarity']}\n"
            f"‚ú® –û—á–∫–∏: +{cat['points']} (–í—Å–µ–≥–æ: {get_user_points(user_id)})\n"
            f"üê± –ö–æ—Ç–æ–∫–æ–∏–Ω—ã: +{cat['cat_coins']} (–í—Å–µ–≥–æ: {get_user_cat_coins(user_id)})\n"
            f"üßß –û–ø–∏—Å–∞–Ω–∏–µ: {cat['catinfo']}"
        )

        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üîÑ –ü–æ–ª—É—á–∏—Ç—å –µ—â–µ –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="get_bonus_card"),
            InlineKeyboardButton("üìö –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é", callback_data="view_collection")
        )

        await message.bot.send_photo(
            chat_id=message.chat.id,
            photo=cat["photo"],
            caption=message_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard,
            reply_to_message_id=message.message_id,
        )
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

        await log_operation_async(
            "Bonus Reward",
            f"User {message.from_user.id} claimed bonus (Rarity: {cat['rarity']})",
            "SUCCESS"
        )


async def put_command(message: types.Message):
    if not await check_name(message):
        return
    user_id = message.from_user.id
    current_time = time.time()

    cursor.execute("SELECT has_scratcher, last_put_time FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result or not result[0]:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ß–µ—Å–∞–ª–∫–∏! –ö—É–ø–∏—Ç–µ –µ—ë –≤ –º–∞–≥–∞–∑–∏–Ω–µ, —á—Ç–æ–±—ã –≥–ª–∞–¥–∏—Ç—å –∫–æ—Ç–∏–∫–∞.")
        return

    has_scratcher, last_put_time = result

    if last_put_time and (current_time - last_put_time) < 7200:
        remaining_time = 7200 - (current_time - last_put_time)
        hours = int(remaining_time // 3600)
        minutes = int((remaining_time % 3600) // 60)
        await message.answer(
            f"–í—ã —É–∂–µ –≥–ª–∞–¥–∏–ª–∏ –∫–æ—Ç–∏–∫–∞ –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç."
        )
        return

    cursor.execute("UPDATE users SET last_put_time = ? WHERE user_id = ?", (current_time, user_id))
    conn.commit()

    cursor.execute("UPDATE users SET points = points + 1000, cat_coins = cat_coins + 500 WHERE user_id = ?", (user_id,))
    conn.commit()

    await message.answer(
        "–í—ã –ø–æ–≥–ª–∞–¥–∏–ª–∏ –∫–æ—Ç–∏–∫–∞ –∏ –ø–æ–ª—É—á–∏–ª–∏ 1000 –æ—á–∫–æ–≤ –∏ 500 –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤! üêæ\n"
        "–ö–æ—Ç–∏–∫ –¥–æ–≤–æ–ª–µ–Ω –∏ –º—É—Ä–ª—ã—á–µ—Ç –æ—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è!"
    )

async def collection_command(message: types.Message):
    if not await check_name(message):
        return
    user_id = message.from_user.id

    cursor.execute("SELECT cat_image, rarity, points, cat_id FROM cards WHERE user_id = ?", (user_id,))
    cards = cursor.fetchall()

    if not cards:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.")
        return

    await show_card(message, cards, 0)

async def show_card(message: types.Message, cards: list, index: int):
    if not await check_name(message):
        return
    if index >= len(cards) or index < 0:
        await message.answer("–≠—Ç–æ –≤—Å–µ –≤–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏!")
        return

    cat_image, rarity, points, cat_id = cards[index]

    cat = next((cat for cat in cats if cat["id"] == cat_id), None)
    cat_name = cat["catname"] if cat else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ—Ç"

    keyboard = InlineKeyboardMarkup(row_width=2)

    if index > 0:
        keyboard.insert(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"prev_card_{index - 1}"))

    if index < len(cards) - 1:
        keyboard.insert(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"next_card_{index + 1}"))

    await message.bot.send_photo(
        chat_id=message.chat.id,
        photo=cat_image,
        caption=f"üê± –ò–º—è: {cat_name}\nüíé –†–µ–¥–∫–æ—Å—Ç—å: {rarity}\n‚ú® –û—á–∫–∏: {points}\n",
        reply_markup=keyboard,
    )

async def next_card_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    index = int(callback.data.split("_")[2])

    cursor.execute("SELECT cat_image, rarity, points, cat_id FROM cards WHERE user_id = ?", (user_id,))
    cards = cursor.fetchall()

    await callback.message.delete()

    await show_card(callback.message, cards, index)

async def prev_card_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    index = int(callback.data.split("_")[2])

    cursor.execute("SELECT cat_image, rarity, points, cat_id FROM cards WHERE user_id = ?", (user_id,))
    cards = cursor.fetchall()

    await callback.message.delete()

    await show_card(callback.message, cards, index)

async def get_another_card_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    current_time = time.time()

    if user_id in cooldowns:
        remaining_time = 10800 - (current_time - cooldowns[user_id])
        if remaining_time > 0:
            hours = int(remaining_time // 3600)
            minutes = int((remaining_time % 3600) // 60)
            await callback.answer(
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ—Ç–∞ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç."
            )
            return

    await callback.answer("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏...")
    await send_cat(callback.message)

async def get_bonus_card_callback(callback: types.CallbackQuery):
    current_user_id = callback.from_user.id
    current_time = time.time()

    if current_user_id in bonus_cooldowns:
        bonus_remaining_time = 21600 - (current_time - bonus_cooldowns[current_user_id])
        if bonus_remaining_time > 0:
            hours = int(bonus_remaining_time // 3600)
            minutes = int((bonus_remaining_time % 3600) // 60)
            await callback.answer(
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ –±–æ–Ω—É—Å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç."
            )
            return

    await callback.answer("–ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏...")
    bonus_cooldowns[current_user_id] = current_time

async def view_collection_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    cursor.execute("SELECT cat_image, rarity, points, cat_id FROM cards WHERE user_id = ?", (user_id,))
    cards = cursor.fetchall()

    if not cards:
        await callback.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.")
        return

    await show_card(callback.message, cards, 0)

def register_commands_handlers(dp: Dispatcher):
    dp.register_message_handler(help_command, commands=["help"])
    dp.register_message_handler(cat_command, commands=["cat"])
    dp.register_message_handler(send_cat, lambda message: message.text.lower() == "–∫–æ—Ç")
    dp.register_message_handler(bonus_command, commands=["bonus"])
    dp.register_message_handler(put_command, commands=["put"])
    dp.register_message_handler(collection_command, commands=["collection"])
    dp.register_callback_query_handler(next_card_callback, lambda c: c.data.startswith("next_card_"))
    dp.register_callback_query_handler(prev_card_callback, lambda c: c.data.startswith("prev_card_"))
    dp.register_callback_query_handler(get_another_card_callback, lambda c: c.data == "get_another_card")
    dp.register_message_handler(send_cat, lambda message: message.text.lower() in cat_synonyms)
    dp.register_callback_query_handler(get_bonus_card_callback, lambda c: c.data == "get_bonus_card")
    dp.register_callback_query_handler(view_collection_callback, lambda c:c.data == "view_collection")
    dp.register_callback_query_handler(send_cat, lambda c: c.data == "send_cat")
    dp.register_callback_query_handler(bonus_command, lambda c: c.data == "bonus_command")
    dp.register_callback_query_handler(shop_command, lambda c: c.data == "shop_command")
    dp.register_callback_query_handler(put_command, lambda c: c.data == "put_command")
    dp.register_callback_query_handler(collection_command, lambda c: c.data == "collection_command")
    dp.register_callback_query_handler(jujitsu_command, lambda c: c.data == "jujitsu_command")
    dp.register_callback_query_handler(leders_command, lambda c: c.data == "leders_command")
    dp.register_callback_query_handler(exchange_command, lambda c: c.data == "exchange_command")
    dp.register_my_chat_member_handler(on_bot_added_to_group)
    dp.register_message_handler(initndr_command, commands=["initndr"])
    dp.register_message_handler(HiTmaN_VadIM_command, commands=["HiTmaN_VadIM"])
    dp.register_message_handler(MrLololoshka_command, commands=["MrLololoshka"])
    dp.register_message_handler(nyan_mp3_command, commands=["nyan_mp3"])
    create_magic_cards_table()
    add_wishing_fountain_column()


